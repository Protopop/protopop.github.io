<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Rune</title>
</head>
<body>
<div class="fullPageTitle" class="norm"><span class ="dungeonName">Dungeon</span> Rune</div>
<div id="slider"> </div>
<div id="main" class="main">
		<canvas id="puzzle" width="480px" height="480px"></canvas>
</div>
<script>

$(".load").click(function (e) { 
			e.preventDefault();
			var loadingBar = $('#loadingBar');
			var content = $('.fullPageContent');
			loadingBar.show();
			content.html("loading");
			$('.fullPageContent').hide();
			content.load($(this).attr("href"), function() {
				loadingBar.hide();
	
				$('.fullPageContent').fadeIn(300, function(){
					//alert("faded");
					
				});
			});
        });
		
		
$("#fullPage").addClass("freeze");
$('.dungeonName').text(currentLocation);
 var doorOpen = false;
var difficultyAdjutment = 0;

var context = document.getElementById('puzzle').getContext('2d');

var img = new Image();
img.src = 'assets/img/runes/fengott.jpg';
img.addEventListener('load', drawTiles, false);

var boardSize = document.getElementById('puzzle').width;

// ADDED DUNGEON FUNCTIONS

for (var i = 0; i < itemsArray.length; i++) {
			itemsArray[i].name=="Rune Thinner"?difficultyAdjutment=1:null;
			itemsArray[i].name=="Rune Cracker"?difficultyAdjutment=2:null;
			itemsArray[i].name=="Rune Crusher"?difficultyAdjutment=3:null;
			
		}
		//alert(crackRune);
		
		//difficultyAdjutment>0?$('.stuck').hide():null;
		
		//var runeName = "";
		//difficultyAdjutment == 1?runeName="Rune Thinner":null;
		//difficultyAdjutment == 2?runeName="Rune Cracker":null;
		//difficultyAdjutment == 3?runeName="Rune Crusher":null;
		
		
		
//if(difficultyAdjutment >0){
	//popMessage("Do you want to use your "+runeName+" to simplify this puzzle?"
var tileCount = 2;
 currentLocation=="Basin Wood"?tileCount=2-difficultyAdjutment-crackRune:null;
  currentLocation=="Kolde Tomb"?tileCount=3-difficultyAdjutment-crackRune:null;
   currentLocation=="Nezerdad"?tileCount=4-difficultyAdjutment-crackRune:null;
   
   crackRune>0?$('.stuck').hide():null;
   crackRune = 0;
   
   currentLocation=="Basin Wood"?$('.stuck').hide():null;
    difficultyAdjutment==3?$('.stuck').hide():null;
 //
 tileCount<2?tileCount = 2:null;
 
var tileSize = boardSize / tileCount;

var clickLoc = new Object;
clickLoc.x = 0;
clickLoc.y = 0;

var emptyLoc = new Object;
emptyLoc.x = 0;
emptyLoc.y = 0;

var solved = false;

var boardParts = new Object;
setBoard();

var goldReward = 100*(tileCount-1)*(tileCount-1);
$('.puzzleGoldAmount').text(goldReward);

document.getElementById('puzzle').onmousemove = function(e) {
  
    clickLoc.x = Math.floor((e.pageX - this.offsetLeft - $('#fullPage').offset().left) / tileSize);
  clickLoc.y = Math.floor((e.pageY - this.offsetTop-$('#fullPage').offset().top) / tileSize);
};

document.getElementById('puzzle').onclick = function() {
  if (distance(clickLoc.x, clickLoc.y, emptyLoc.x, emptyLoc.y) == 1) {
    slideTile(emptyLoc, clickLoc);
    drawTiles();
  }
  if (solved && doorOpen == false) {
	  $('.stuck').hide();
		$('.puzzleGold').hide();
	  doorOpen = true;
    playSound('success',1);
   $('#puzzle').css('box-shadow','0px 0px 30px 30px #fff');
	setTimeout(function() {
		changeGold(+goldReward);
		
		 playSound('victory',1);
		openDungeonDoor();
		currentLocation=="Basin Wood"?basinWoodOpen = true:null;
		currentLocation=="Tombwood"?tombWoodOpen = true:null;
		currentLocation=="Nezerdad"?nezerdadOpen = true:null;
		dungeonArray.push(currentLocation);
		saveAll();
		 playSound('spell',1);
		 $('#fullPage').removeClass('freeze');
		
		}, 1000);
		
		
  }
};

function setBoard() {
  boardParts = new Array(tileCount);
  for (var i = 0; i < tileCount; ++i) {
    boardParts[i] = new Array(tileCount);
    for (var j = 0; j < tileCount; ++j) {
      boardParts[i][j] = new Object;
      boardParts[i][j].x = i;
      boardParts[i][j].y = j;
    }
  }
  initTiles();
  initEmpty();
  if (!isSolvable(tileCount, tileCount, emptyLoc.y + 1)) {
    if (emptyLoc.y == 0 && emptyLoc.x <= 1) {
      swapTiles(tileCount - 2, tileCount - 1, tileCount - 1, tileCount - 1);
    } else {
      swapTiles(0, 0, 1, 0);
    }
    initEmpty();
  }
  solved = false;
}

function initTiles() {
  var i = tileCount * tileCount - 1;
  while (i > 0) {
    var j = Math.floor(Math.random() * i);
    var xi = i % tileCount;
    var yi = Math.floor(i / tileCount);
    var xj = j % tileCount;
    var yj = Math.floor(j / tileCount);
    swapTiles(xi, yi, xj, yj);
    --i;
  }

}

function swapTiles(i, j, k, l) {
  var temp = new Object();
  temp = boardParts[i][j];
  boardParts[i][j] = boardParts[k][l];
  boardParts[k][l] = temp;
}

function isSolvable(width, height, emptyRow) {
  if (width % 2 == 1) {
    return (sumInversions() % 2 == 0)
  } else {
    return ((sumInversions() + height - emptyRow) % 2 == 0)
  }
}

function sumInversions() {
  var inversions = 0;
  for (var j = 0; j < tileCount; ++j) {
    for (var i = 0; i < tileCount; ++i) {
      inversions += countInversions(i, j);
    }
  }
  return inversions;
}

function countInversions(i, j) {
  var inversions = 0;
  var tileNum = j * tileCount + i;
  var lastTile = tileCount * tileCount;
  var tileValue = boardParts[i][j].y * tileCount + boardParts[i][j].x;
  for (var q = tileNum + 1; q < lastTile; ++q) {
    var k = q % tileCount;
    var l = Math.floor(q / tileCount);

    var compValue = boardParts[k][l].y * tileCount + boardParts[k][l].x;
    if (tileValue > compValue && tileValue != (lastTile - 1)) {
      ++inversions;
    }
  }
  return inversions;
}

function initEmpty() {
  for (var j = 0; j < tileCount; ++j) {
    for (var i = 0; i < tileCount; ++i) {
      if (boardParts[i][j].x == tileCount - 1 && boardParts[i][j].y == tileCount - 1) {
        emptyLoc.x = i;
        emptyLoc.y = j;
      }
    }
  }
}

function drawTiles() {
  context.clearRect ( 0 , 0 , boardSize , boardSize );
  for (var i = 0; i < tileCount; ++i) {
    for (var j = 0; j < tileCount; ++j) {
      var x = boardParts[i][j].x;
      var y = boardParts[i][j].y;
      if(i != emptyLoc.x || j != emptyLoc.y || solved == true) {
        context.drawImage(img, x * tileSize, y * tileSize, tileSize, tileSize,
            i * tileSize, j * tileSize, tileSize, tileSize);
      }
    }
  }
}

function distance(x1, y1, x2, y2) {
  return Math.abs(x1 - x2) + Math.abs(y1 - y2);
}

function slideTile(toLoc, fromLoc) {
  if (!solved) {
    boardParts[toLoc.x][toLoc.y].x = boardParts[fromLoc.x][fromLoc.y].x;
    boardParts[toLoc.x][toLoc.y].y = boardParts[fromLoc.x][fromLoc.y].y;
    boardParts[fromLoc.x][fromLoc.y].x = tileCount - 1;
    boardParts[fromLoc.x][fromLoc.y].y = tileCount - 1;
    toLoc.x = fromLoc.x;
    toLoc.y = fromLoc.y;
    checkSolved();
  }
}

function checkSolved() {
  var flag = true;
  for (var i = 0; i < tileCount; ++i) {
    for (var j = 0; j < tileCount; ++j) {
      if (boardParts[i][j].x != i || boardParts[i][j].y != j) {
        flag = false;
      }
    }
  }
  solved = flag;
}


</script> 
<div class="stuck">Puzzle too hard? <br>
Use a Rune Cracker to simplify it, but you will receive less gold<img src="assets/img/items/objects/rune1.png" width="200" height="200" /><a href="pages/core/puzzle.htm" onMouseDown="crackRune=2;playSound('shatter');" class="runeCrackButton load">Use Rune Cracker</a></div><div class="puzzleGold"> Solve this puzzle to unlock the dungeon and receive <br>
<span class="puzzleGoldAmount">50</span> <br>
gold</div>
<a href="#"  class='closeFullPageButton' onClick="closeFullPage();$('#fullPage').removeClass('freeze');">Give Up</a>
</body>
</html>
