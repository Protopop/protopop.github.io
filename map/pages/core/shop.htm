<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
</meta>
<title>Nimia</title>
<style type="text/css">
.cardButton {
	font-size: 16px;
}
.cardBack .storeItem {
	opacity:0.4;
}

.noRotate .storeItem {
    transform: rotate(0deg) scale(1) skew(0deg) translate(0px);
}

</style>
</head>
<body>
<div class="fullPageContent"> 
		<script type="text/javascript">
		
		var stealChance = 0;
		
		var powerWords = [
	 		 null,
			 ['rusty','basic','simple'],
			 ['solid','basic','simple'],
			 ['solid','trusty','strong'],
			 ['strong','basic','simple'],
			 ['well built','basic','simple'],
			['fine','potent','strong'],
			 ['fine','potent','carefully crafted'],
			 ['finely crafted','basic','simple'],
			 ['deadly','well constructed','simple'],
			 ['deadly','well crafted','well built'],
			 ['well oiled','deadly','beautiful'],
			 ['wonderous','powerful','simple'],
	  
	  
	  
	  ]
	  
	
	  
	  var currentStoreArray = weapons;
	  if (currentStoreType == "weapons"){
	  	currentStoreArray = weapons;
	  } else if (currentStoreType == "items"){
	   currentStoreArray = items;
	  } else if (currentStoreType == "armor"){
	   currentStoreArray = armor;
	  }
	  if(currentStoreType == "magic"){
		  currentStoreArray = magic;
		  
	  }
	  
	  
      pickOne = true;
      cardsFlipped = 0;
	  $('.cityNam').text(currentStoreType + " of "+ currentLocation.name.substring(0, currentLocation.name.length- 1));
      
	 var storeLevel = 1;
	 if(currentLocationLevel){
		storeLevel = currentLocationLevel;
	 }
	 // alert("Storelevel is "+storeLevel);
	// storeLevel = 1;
	  // FIND ALL WEAPONS OF THIS LEVEL
	  var weaponsByLevel = [];
	  var weaponStoreStock = [];
	  
	   for (var i = 0; i < currentStoreArray.length; i++) {
		  if(currentStoreArray[i].level == storeLevel){
			 
			 // alert(weapons[i].name+" is level "+weapons[i].level);
			 weaponsByLevel.push(currentStoreArray[i]);
		  }
		   
	   }
	   
	   shuffle(weaponsByLevel);
		 // alert(weaponsByLevel);
		  var maxItems = weaponsByLevel.length;
		  maxItems = 3;
		  if(maxItems > 3){maxItems = 3;}
		  
		   //make sure theres at least three in each
		    $('.flipCard').hide();
			
			cardNumber = 0 + currentLocation.uniqueId;
			
			
	   for (var f = 0; f < maxItems; f++) {
		   cardNumber++;
		//   alert(weaponsByLevel[f].name);
		  // weaponsByLevel[f] = generateObject(storeLevel,'weapon',f);
		  var itm = {};
		   if (currentStoreType == "weapons"){
	  	itm = generateObject(storeLevel,'weapon',f);
	  } else if (currentStoreType == "items"){
	  // currentStoreArray = items;
	   itm =  {
        name: "Healing Shroom",
        description: "+5 to health",
        img: 'assets/img/items/objects/potion.png',
        hp: 5,
        level: 1,
        price: 5,
		inventory: true,
		type:'healing shroom'
    }
	  } else if (currentStoreType == "armor"){
	  itm = generateObject(storeLevel,'armor',f);
	  $('.flipCard').addClass("noRotate");
	  }
	  if(currentStoreType == "magic"){
		 itm = generateObject(storeLevel,'magic',f);
		  
	  }
		   itm.currentStoreType = currentStoreType;
		  // alert(currentStoreType+"   "+itm.currentStoreType);
		  // weaponStoreStock.push(weaponsByLevel[f]);
		   weaponStoreStock.push(itm);
		   
		  // alert(f);
		   weaponType = itm.type;
		 //  alert(itm.name); 
		 var spec = "";
		  if(itm.specialPower){spec = itm.specialPower;}
		  
		   var cs = '#cardSet'+ (f+1);
		    $(cs).show();
		  // $(cs+' .storeItem').attr("src", itm.img);
		 //   $(cs+' .storeItem').attr("src", "assets/img/"+currentStoreType+"/"+removeSpaces(itm.name.toLowerCase())+".png");
		 if (currentStoreType == "weapons"){
			 
			 $(cs+' .storeItem').attr("src", "assets/img/"+currentStoreType+"/"+removeSpaces(itm.type.toLowerCase()+itm.level)+".png");} else{
				 
				 $(cs+' .storeItem').attr("src", "assets/img/"+currentStoreType+"/"+removeSpaces(itm.type.toLowerCase())+".png");
			 }
		    $(cs+' .cardTitle').text(itm.name);
			
			
			if (currentStoreType != "armor"){
				$(cs+' .cardDamage').text('' + itm.level*3);
				$(cs+' .cardDamage').css("display","block");
			}
			
			 $(cs+' .cardSubTitle').text("Level "+ itm.level + " " +  weaponType);
			 if(weaponType ==  "magic"){
				 if(itm.level > playerLevel){
					$(cs+' .cardButton').text("Level "+itm.level + " required"); 
					$(cs+' .cardButton').css('pointer-events','none');
					$(cs+' .cardButton').css('opacity',0.5);
				 } else {
				 $(cs+' .cardButton').text("Aquire this Spell");
				 }
			 } else {
			 $(cs+' .cardButton').text("Buy for "+ itm.price +" gold");
			 
			 }
			 
			
			 if(playerCareer == "swipe"){
				 stealChance = +60 +(playerLevel * 10) - (itm.level * 10);
				 if(stealChance > 95){stealChance = 95;}
				  if(stealChance < 5){stealChance = 5;}
			   $(cs+' .cardButtonExtra').css("display","block");
			   $(cs+' .cardButtonExtra').text("Steal "+stealChance + "% Chance"); 
			 }
			   
			 
			 // DESCRIPTION PROCEURAL
			 
			 var description = "";
			// if(powerWords[storeLevel]){
//			 var powerWord = getPowerWord(storeLevel);
//			 description = powerWord + " " + weaponType  +" that does up to "+ itm.level*baseWeaponDamage +" "+itm.damageType +" damage";
//			 }
			 if(currentStoreType=='armor'){
				description = itm.description
			 } else{
				 
			 description = weaponType  +" does up to "+ (itm.level*baseWeaponDamage+1) +" "+itm.damageType +" damage"+spec;
			 }
			 $(cs+' .cardDamage').text((itm.level*baseWeaponDamage)+1);
			 
			 if(itm.name == "Healing Shroom"){
				 
				 description = "A common RugShroom with powerful healing properties.";
				 $(cs+' .cardSubTitle').text("");
			 }
			 $(cs+' .itemDescription').html(description);
			 
			 if(itm.career){
				 
				 // GRAMMAR
				 
				 var restrictions = "";
				 
				 for (var g = 0; g < itm.career.length; g++) {
					 restrictions +=itm.career[g];
					 if(g ==  itm.career.length -2){
						 restrictions += " and ";
					 } else {
						 if(g <  itm.career.length -2){
						 restrictions += ", "
						 }
					 }
					 
				 }
					 
					 
			 $(cs+' .restrictionsTitle').text(restrictions+ " only");
			 
			 }
		   
	   }
	  
	  
      function getPowerWord(l){
		  
		   var itemIndex = Math.round(CustomRandom(0, powerWords[l].length) - 1);
    return powerWords[l][itemIndex];
	  }
	  
function buyItem(itm,steal){
	
	if(itm.type == "magic"){
		
		if(playerCareer == "seer"){
			
			takeItem(itm,steal);
			
		} else {
			
			popMessage("Only Seers can weild magic. (You can change your career at any Guild)","Seers Only");
		}
		
	} else {
	
		if(steal == false){
			
			if(playerGold<itm.price){
				  
				errorSound();
				popMessage("You can earn gold by finding quests in the cities, defeating beasts in the wilds or selling items","Not Enough Gold");
			
			  
			} else {
				//  if(playerInventory.length >7){
				if(deckArray.length >9 && itm.name != "Healing Shroom"){
				//	alert(deckArray.length);
					popMessage("You can SELL items in your BATTLE DECK when you're not in battle. Click a card to sell it.","YOUR BATTLE DECK IS FULL");
				} else {
				  
				  	if(playerLevel < itm.level){
				//	alert(deckArray.length);
					popMessage("You need to be Level "+itm.level+" to use this. Gain levels by exploring, completing quests and defeating beasts.","CANNOT USE ITEM");
				} else {
				  
					takeItem(itm,steal);
					
				}
			  
				}
			
			}
		} else {
			
			//  if(playerInventory.length >7){
				if(deckArray.length >9 && itm.name != "Healing Shroom"){
				//	alert(deckArray.length);
					popMessage("You can SELL items in your BATTLE DECK when you're not in battle. Click a card to sell it.","YOUR BATTLE DECK IS FULL");
				} else {
				  
				  var stealRoll = randomNumber(100);
				  alert("You rolled a "+stealRoll);
				  
				  if(stealRoll <= stealChance){
					  	playSound(victory, 1);
						  


					takeItem(itm,steal); 
					} else {
						playSound(lose,1);
						var fine = +itm.level * 20;
						popMessage("You have been fined "+fine+" gold","YOU WERE CAUGHT");
						playerGold -= fine;
						if(playerGold < 20){playerGold = 20;}
						updateStats();
						
					}
					
					 changeAlignment('anarchic', 90,'Stealing is');
			  
				}
		}
		
	}
		  
}
	  
function takeItem(itm,steal){
		  
		  var ms1 = "You bought ";
		  if(steal == true){
			  ms1 = "You stole ";
		  }
		//  alert(steal);
		  if(steal == false){
		  playerGold-=itm.price;
		  }
			playSound(coins,1);
			if(itm.name == "Healing Shroom"){
				healingPotions +=1;
				//saveGame();
				popMessage("It has been added to your BATTLE DECK",ms1+itm.name );
			} else {
				
				if(deckArray.length > 9){
					// alert("Your BATTLEBAR is full, so the "+itm.name+" has been purchased and added to your inventory. You can customize you BATTLEBAR by clicking the PLAYER ICON on the right");
					popMessage("The "+itm.name+" has been purchased and added to your BATTLE DECK. You can customize you BATTLEBAR by clicking the PLAYER ICON on the right","Your BATTLEBAR is full");
				} else {
					//deckArray.push(itm);
					//populateAttackBar();
					// alert(itm.name+" has been purchased and added to your inventory");
					popMessage("It has been added to your BATTLE DECK",ms1+itm.name );
				}
		  
				//playerInventory.push(itm);
				
				deckArray.push(itm);
				
				//switchDeck.call();
				arrangeCards();
				switchDeck.call();
		  
			}
		 
			updateStats();
			
		  if (currentStoreType == "armor"){
	   playerHp = maxHp;
	  }
		  
		  
		  
		
			/*if(deckArray[0]){
            fillBattleCard(1, powerLevel, 1000);
			popUpCard(1);
			}
			if (deckArray[1] != null) {
            fillBattleCard(2, powerLevel, 1000);
			popUpCard(2);
			}
			if (deckArray[2] != null) {
            fillBattleCard(3, powerLevel, 1000);
			popUpCard(3);
			}
			
			if(deckArray[3]){
            fillBattleCard(4, powerLevel, 1000);
			popUpCard(4);
			}
			if (deckArray[4] != null) {
            fillBattleCard(5, powerLevel, 1000);
			popUpCard(5);
			}
			if (deckArray[5] != null) {
            fillBattleCard(6, powerLevel, 1000);
			popUpCard(6);
			}
			
			if(deckArray[6]){
            fillBattleCard(7, powerLevel, 1000);
			popUpCard(7);
			}
			if (deckArray[7] != null) {
            fillBattleCard(8, powerLevel, 1000);
			popUpCard(8);
			}
			if (deckArray[8] != null) {
            fillBattleCard(9, powerLevel, 1000);
			popUpCard(9);
			}*/
			
			
			
	  }
	  
	  function checkOwned(n){
		  
		  // look through inventory for object
		  
		  $('#cardSet1 .cardButton').text("Buy for "+ weaponStoreStock[0].price +" gold");
		    $('#cardSet2 .cardButton').text("Buy for "+ weaponStoreStock[1].price +" gold");
			  $('#cardSet3 .cardButton').text("Buy for "+ weaponStoreStock[2].price +" gold");
			  
			     $('#cardSet1 .cardButton').css("opacity",1);
				 $('#cardSet1 .cardButton').css("pointerEvents","auto");
				 
				   $('#cardSet2 .cardButton').css("opacity",1);
				 $('#cardSet2 .cardButton').css("pointerEvents","auto");
				 
				   $('#cardSet3 .cardButton').css("opacity",1);
				 $('#cardSet3 .cardButton').css("pointerEvents","auto");
		  
		  
		   for (var g = 0; g < deckArray.length; g++) {
			 //  alert(deckArray[g].name);
			   // RESET OWNED BUTTONS
			   
				
					 
			   if(deckArray[g]){
			   if( weaponStoreStock[n].name == deckArray[g].name){
				  // alert("owned");
				   $('#cardSet'+ (n+1) + " .cardButton").text("Owned");
				    $('#cardSet'+ (n+1) + " .cardButton").css("opacity",0.4);
					 $('#cardSet'+ (n+1) + " .cardButton").css("pointerEvents","none");
					 
					  $('#cardSet'+ (n+1) + " .cardButtonExtra").text("Owned");
				    $('#cardSet'+ (n+1) + " .cardButtonExtra").css("opacity",0.0);
					 $('#cardSet'+ (n+1) + " .cardButtonExtra").css("pointerEvents","none");
			   }
			   }
		   }
	  }
    </script>
		<div class="fullPageTitle"><span class="cityNam">City</span></div>
		<a class="closeStage" onClick="closeStage();"> X </a>
		
		<!--CARD 1-->
		<!-------------------------------------------------------------------->
		
		
		
		<div class="flipCard" id="cardSet1">
		
		<!--FRONT-->
		
		<div class="card cardFront  smooth"  onMouseDown="checkOwned(0);flipCardsPlain(1);">
			<div class="cardTitle"> Gilded Hammer</div>
			<div class="cardSubTitle"> Level 12 Rook </div>
			<div class="restrictionsTitle"> </div>
			<img src="assets/img/blank.png" width="256" height="256" class="storeItem"/>  
		</div>
		
		<!--BACK-->
						
		<div class="card cardBack smooth" onClick="unflipCards();">
<div class='cardDamage'></div> 
			<div class="cardTitle"> Title </div>
			<div class="cardSubTitle"> Subtitle </div>
			<div class="itemDescription"> Description </div>
			
			<img src="assets/img/portrait/citizen/merpaladine.png" width="320" height="400" class="storeItem"/>  <a class="cardButtonExtra" onClick="buyItem(weaponStoreStock[0]),true;"> Steal 50% chance </a>  <a class="cardButton" onClick="buyItem(weaponStoreStock[0],false);"> Buy </a> </div>
		</div>
		
		
		<!--CARD 2-->
		<!-------------------------------------------------------------------->
		
		<div class="flipCard" id="cardSet2">
		
		<!--FRONT-->
		
				<div class="card cardFront smooth"  onMouseDown="checkOwned(1);flipCardsPlain(2);"> 
				<div class="cardTitle"> CrunchMase </div>
						<div class="cardSubTitle"> Level 2 Shade </div>
						<div class="restrictionsTitle"> </div>
						<img src="assets/img/weapons/mace02.png" width="256" height="256" class="storeItem"/> 
						</div>
						
				<!--BACK-->
						
		<div class="card cardBack smooth" onClick="unflipCards();"> 
		<div class='cardDamage'></div>
			<div class="cardTitle"> Title </div>
			<div class="cardSubTitle"> Subtitle </div>
			<div class="itemDescription"> Description </div>
			
			<img src="assets/img/portrait/citizen/merpaladine.png" width="320" height="400" class="storeItem"/> <a class="cardButtonExtra" onClick="buyItem(weaponStoreStock[1],true);"> Steal 50% chance </a>  <a class="cardButton" onClick="buyItem(weaponStoreStock[1],false);"> Buy </a> </div>
		</div>
		
		<!--CARD 3-->
		<!-------------------------------------------------------------------->
		
		<div class="flipCard" id="cardSet3">
		
		<!--FRONT-->
		
				<div class="card cardFront smooth"  onMouseDown="checkOwned(2);flipCardsPlain(3);">
				<div class="cardTitle"> BrettleStaff </div>
						<div class="cardSubTitle"> Level 2 Shade </div>
						<div class="restrictionsTitle"> </div>
						<img src="assets/img/weapons/staff03.png" width="256" height="256" class="storeItem"/> 
						 </div>
						 
				<!--BACK-->
						
		<div class="card cardBack smooth" onClick="unflipCards();"> 
<div class='cardDamage'></div>
			<div class="cardTitle"> Title </div>
			<div class="cardSubTitle"> Subtitle </div>
			<div class="itemDescription"> Description </div>
			
			<img src="assets/img/portrait/citizen/merpaladine.png" width="320" height="400" class="storeItem"/>  <a class="cardButtonExtra" onClick="buyItem(weaponStoreStock[2],true);"> Steal 50% chance </a> <a class="cardButton" onClick="buyItem(weaponStoreStock[2],false);"> Buy </a> </div>
		</div>
		
</div>
</body>
</html>
